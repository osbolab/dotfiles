FUNCTION  camelcasemotion#Motion()
Called 2 times
Total time:   0.000434
 Self time:   0.000058

count  total (s)   self (s)
                            "*******************************************************************************
                            "* PURPOSE:
                            "   Perform the motion over CamelCaseWords or underscore_notation. 
                            "* ASSUMPTIONS / PRECONDITIONS:
                            "   none
                            "* EFFECTS / POSTCONDITIONS:
                            "   Move cursor / change selection. 
                            "* INPUTS:
                            "   a:direction	one of 'w', 'b', 'e'
                            "   a:count	number of "words" to move over
                            "   a:mode	one of 'n', 'o', 'v', 'iv' (latter one is a special visual mode
                            "		when inside the inner "word" text objects. 
                            "* RETURN VALUES: 
                            "   none
                            "*******************************************************************************
                                " Visual mode needs special preparations and postprocessing; 
                                " normal and operator-pending mode breeze through to s:Move(). 
                            
    2              0.000005     if a:mode == 'v'
                            	" Visual mode was left when calling this function. Reselecting the current
                            	" selection returns to visual mode and allows to call search() and issue
                            	" normal mode motions while staying in visual mode. 
                            	normal! gv
                                endif
    2              0.000003     if a:mode == 'v' || a:mode == 'iv'
                            
                            	" Note_1a:
                            	if &selection != 'exclusive' && a:direction == 'w'
                            	    normal! l
                            	endif
                                endif
                            
    2   0.000388   0.000012     call s:Move( a:direction, a:count, a:mode )
                            
    2              0.000004     if a:mode == 'v' || a:mode == 'iv'
                            	" Note: 'selection' setting. 
                            	if &selection == 'exclusive' && a:direction == 'e'
                            	    " When set to 'exclusive', the "forward to end" motion (',e') does not
                            	    " include the last character of the moved-over "word". To include that, an
                            	    " additional 'l' motion is appended to the motion; similar to the
                            	    " special treatment in operator-pending mode. 
                            	    normal! l
                            	elseif &selection != 'exclusive' && a:direction != 'e'
                            	    " Note_1b:
                            	    " The forward and backward motions move to the beginning of the next "word".
                            	    " When 'selection' is set to 'inclusive' or 'old', this is one character too far. 
                            	    " The appended 'h' motion undoes this. Because of this backward step,
                            	    " though, the forward motion finds the current "word" again, and would
                            	    " be stuck on the current "word". An 'l' motion before the CamelCase
                            	    " motion (see Note_1a) fixes that. 
                            	    normal! h
                            	endif
                                endif

FUNCTION  <SNR>93_Move()
Called 2 times
Total time:   0.000376
 Self time:   0.000376

count  total (s)   self (s)
                                " Note: There is no inversion of the regular expression character class
                                " 'keyword character' (\k). We need an inversion "non-keyword" defined as
                                " "any non-whitespace character that is not a keyword character" (e.g.
                                " [!@#$%^&*()]). This can be specified via a non-whitespace character in
                                " whose place no keyword character matches (\k\@!\S). 
                            
                                "echo "count is " . a:count
    2              0.000004     let l:i = 0
    4              0.000006     while l:i < a:count
    2              0.000002 	if a:direction == 'e'
                            	    " "Forward to end" motion. 
                            	    "call search( '\>\|\(\a\|\d\)\+\ze_', 'We' )
                            	    " end of ...
                            	    " number | ACRONYM followed by CamelCase or number | CamelCase | underscore_notation | non-keyword | word
    2              0.000273 	    call search( '\d\+\|\u\+\ze\%(\u\l\|\d\)\|\l\+\ze\%(\u\|\d\)\|\u\l\+\|\%(\a\|\d\)\+\ze[-_]\|\%(\k\@!\S\)\+\|\%([-_]\@!\k\)\+\>', 'We' )
                            	    " Note: word must be defined as '\k\>'; '\>' on its own somehow
                            	    " dominates over the previous branch. Plus, \k must exclude the
                            	    " underscore, or a trailing one will be incorrectly moved over:
                            	    " '\%(_\@!\k\)'. 
    2              0.000003 	    if a:mode == 'o'
                            		" Note: Special additional treatment for operator-pending mode
                            		" "forward to end" motion. 
                            		" The difference between normal mode, operator-pending and visual
                            		" mode is that in the latter two, the motion must go _past_ the
                            		" final "word" character, so that all characters of the "word" are
                            		" selected. This is done by appending a 'l' motion after the
                            		" search for the next "word". 
                            		"
                            		" In operator-pending mode, the 'l' motion only works properly
                            		" at the end of the line (i.e. when the moved-over "word" is at
                            		" the end of the line) when the 'l' motion is allowed to move
                            		" over to the next line. Thus, the 'l' motion is added
                            		" temporarily to the global 'whichwrap' setting. 
                            		" Without this, the motion would leave out the last character in
                            		" the line. I've also experimented with temporarily setting
                            		" "set virtualedit=onemore" , but that didn't work. 
                            		let l:save_ww = &whichwrap
                            		set whichwrap+=l
                            		normal! l
                            		let &whichwrap = l:save_ww
                            	    endif
    2              0.000001 	else
                            	    " Forward (a:direction == '') and backward (a:direction == 'b')
                            	    " motion. 
                            
                            	    let l:direction = (a:direction == 'w' ? '' : a:direction)
                            
                            	    " CamelCase: Jump to beginning of either (start of word, Word, WORD,
                            	    " 123). 
                            	    " Underscore_notation: Jump to the beginning of an underscore-separated
                            	    " word or number. 
                            	    "call search( '\<\|\u', 'W' . l:direction )
                            	    "call search( '\<\|\u\(\l\+\|\u\+\ze\u\)\|\d\+', 'W' . l:direction )
                            	    "call search( '\<\|\u\(\l\+\|\u\+\ze\u\)\|\d\+\|_\zs\(\a\|\d\)\+', 'W' . l:direction )
                            	    " beginning of ...
                            	    " word | empty line | non-keyword after whitespaces | non-whitespace after word | number | ACRONYM followed by CamelCase or number | CamelCase | underscore followed by ACRONYM, Camel, lowercase or number
                            	    call search( '\<\D\|^$\|\%(^\|\s\)\+\zs\k\@!\S\|\>\S\|\d\+\|\u\+\ze\%(\u\l\|\d\)\|\u\l\+\|[-_]\zs\%(\u\+\|\u\l\+\|\l\+\|\d\+\)', 'W' . l:direction )
                            	    " Note: word must be defined as '\<\D' to avoid that a word like
                            	    " 1234Test is moved over as [1][2]34[T]est instead of [1]234[T]est
                            	    " because \< matches with zero width, and \d\+ will then start
                            	    " matching '234'. To fix that, we make \d\+ be solely responsible
                            	    " for numbers by taken this away from \< via \<\D. (An alternative
                            	    " would be to replace \d\+ with \D\%#\zs\d\+, but that one is more
                            	    " complex.) All other branches are not affected, because they match
                            	    " multiple characters and not the same character multiple times. 
                            	endif
    2              0.000004 	let l:i = l:i + 1
    2              0.000004     endwhile

FUNCTION  Mode()
Called 321 times
Total time:  13.858742
 Self time:  13.858742

count  total (s)   self (s)
  321             13.840280     redraw
  321              0.004644     let l:mode = mode()
                                
  321              0.012591     if     mode ==# "n"  | exec 'hi User1 '.g:NeatStatusLine_color_normal  | return "N"
                                elseif mode ==# "i"  | exec 'hi User1 '.g:NeatStatusLine_color_insert  | return "I"
    1              0.000011     elseif mode ==# "R"  | exec 'hi User1 '.g:NeatStatusLine_color_replace | return "R"
                                elseif mode ==# "v"  | exec 'hi User1 '.g:NeatStatusLine_color_visual  | return "V"
                                elseif mode ==# "V"  | exec 'hi User1 '.g:NeatStatusLine_color_visual  | return "L"
                                elseif mode ==# "" | exec 'hi User1 '.g:NeatStatusLine_color_visual  | return "B"
                                else                 | return l:mode
                                endif

FUNCTION  <SNR>78_Highlight_Matching_Pair()
Called 122 times
Total time:   0.006171
 Self time:   0.006171

count  total (s)   self (s)
                              " Remove any previous match.
  122              0.000408   if exists('w:paren_hl_on') && w:paren_hl_on
                                silent! call matchdelete(3)
                                let w:paren_hl_on = 0
                              endif
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
  122              0.000389   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
                              endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
  122              0.000269   let c_lnum = line('.')
  122              0.000212   let c_col = col('.')
  122              0.000091   let before = 0
                            
  122              0.000308   let text = getline(c_lnum)
  122              0.000289   let c = text[c_col - 1]
  122              0.001493   let plist = split(&matchpairs, '.\zs[:,]')
  122              0.000325   let i = index(plist, c)
  122              0.000083   if i < 0
                                " not found, in Insert mode try character before the cursor
  122              0.000286     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = 1
                                  let c = text[c_col - 2]
                                  let i = index(plist, c)
                                endif
  122              0.000079     if i < 0
                                  " not found, nothing to do
  122              0.000093       return
                                endif
                              endif
                            
                              " Figure out the arguments for searchpairpos().
                              if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
                              else
                                let s_flags = 'nbW'
                                let c2 = c
                                let c = plist[i - 1]
                              endif
                              if c == '['
                                let c = '\['
                                let c2 = '\]'
                              endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
                              if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
                              endif
                            
                              " Build an expression that detects whether the current cursor position is in
                              " certain syntax types (string, comment, etc.), for use as searchpairpos()'s
                              " skip argument.
                              " We match "escape" for special items, such as lispEscapeSpecial.
                              let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|comment"''))'
                              " If executing the expression determines that the cursor is currently in
                              " one of the syntax types, then we want searchpairpos() to find the pair
                              " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                              " outside of the syntax types and s_skip should keep its value so we skip any
                              " matching pair inside the syntax types.
                              execute 'if' s_skip '| let s_skip = 0 | endif'
                            
                              " Limit the search to lines visible in the window.
                              let stoplinebottom = line('w$')
                              let stoplinetop = line('w0')
                              if i % 2 == 0
                                let stopline = stoplinebottom
                              else
                                let stopline = stoplinetop
                              endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
                              if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
                              else
                                let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
                              endif
                              try
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
                              endtry
                            
                              if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
                              endif
                            
                              " If a match is found setup match highlighting.
                              if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
                                if exists('*matchaddpos')
                                  call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
                                endif
                                let w:paren_hl_on = 1
                              endif

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
  321  13.858742             Mode()
  122   0.006171             <SNR>78_Highlight_Matching_Pair()
    2   0.000434   0.000058  camelcasemotion#Motion()
    2   0.000376             <SNR>93_Move()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
  321             13.858742  Mode()
  122              0.006171  <SNR>78_Highlight_Matching_Pair()
    2              0.000376  <SNR>93_Move()
    2   0.000434   0.000058  camelcasemotion#Motion()

